import { Report } from "../operationsInterfaces";
import { AppComplianceAutomationToolForMicrosoft365 } from "../appComplianceAutomationToolForMicrosoft365";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { ReportGetOptionalParams, ReportGetResponse, ReportResource, ReportCreateOrUpdateOptionalParams, ReportCreateOrUpdateResponse, ReportResourcePatch, ReportUpdateOptionalParams, ReportUpdateResponse, ReportDeleteOptionalParams } from "../models";
/** Class containing Report operations. */
export declare class ReportImpl implements Report {
    private readonly client;
    /**
     * Initialize a new instance of the class Report class.
     * @param client Reference to the service client
     */
    constructor(client: AppComplianceAutomationToolForMicrosoft365);
    /**
     * Get the AppComplianceAutomation report and its properties.
     * @param reportName Report Name.
     * @param options The options parameters.
     */
    get(reportName: string, options?: ReportGetOptionalParams): Promise<ReportGetResponse>;
    /**
     * Create a new AppComplianceAutomation report or update an exiting AppComplianceAutomation report.
     * @param reportName Report Name.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(reportName: string, parameters: ReportResource, options?: ReportCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ReportCreateOrUpdateResponse>, ReportCreateOrUpdateResponse>>;
    /**
     * Create a new AppComplianceAutomation report or update an exiting AppComplianceAutomation report.
     * @param reportName Report Name.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(reportName: string, parameters: ReportResource, options?: ReportCreateOrUpdateOptionalParams): Promise<ReportCreateOrUpdateResponse>;
    /**
     * Update an exiting AppComplianceAutomation report.
     * @param reportName Report Name.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginUpdate(reportName: string, parameters: ReportResourcePatch, options?: ReportUpdateOptionalParams): Promise<PollerLike<PollOperationState<ReportUpdateResponse>, ReportUpdateResponse>>;
    /**
     * Update an exiting AppComplianceAutomation report.
     * @param reportName Report Name.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(reportName: string, parameters: ReportResourcePatch, options?: ReportUpdateOptionalParams): Promise<ReportUpdateResponse>;
    /**
     * Delete an AppComplianceAutomation report.
     * @param reportName Report Name.
     * @param options The options parameters.
     */
    beginDelete(reportName: string, options?: ReportDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete an AppComplianceAutomation report.
     * @param reportName Report Name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(reportName: string, options?: ReportDeleteOptionalParams): Promise<void>;
}
//# sourceMappingURL=report.d.ts.map