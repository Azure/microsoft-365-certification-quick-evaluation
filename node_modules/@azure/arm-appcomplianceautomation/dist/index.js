'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link Origin} that the service accepts. */
exports.KnownOrigin = void 0;
(function (KnownOrigin) {
    /** User */
    KnownOrigin["User"] = "user";
    /** System */
    KnownOrigin["System"] = "system";
    /** UserSystem */
    KnownOrigin["UserSystem"] = "user,system";
})(exports.KnownOrigin || (exports.KnownOrigin = {}));
/** Known values of {@link ActionType} that the service accepts. */
exports.KnownActionType = void 0;
(function (KnownActionType) {
    /** Internal */
    KnownActionType["Internal"] = "Internal";
})(exports.KnownActionType || (exports.KnownActionType = {}));
/** Known values of {@link ReportStatus} that the service accepts. */
exports.KnownReportStatus = void 0;
(function (KnownReportStatus) {
    /** Active */
    KnownReportStatus["Active"] = "Active";
    /** Failed */
    KnownReportStatus["Failed"] = "Failed";
    /** Disabled */
    KnownReportStatus["Disabled"] = "Disabled";
})(exports.KnownReportStatus || (exports.KnownReportStatus = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Canceled */
    KnownProvisioningState["Canceled"] = "Canceled";
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
    /** Updating */
    KnownProvisioningState["Updating"] = "Updating";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link CategoryType} that the service accepts. */
exports.KnownCategoryType = void 0;
(function (KnownCategoryType) {
    /** FullyAutomated */
    KnownCategoryType["FullyAutomated"] = "FullyAutomated";
    /** PartiallyAutomated */
    KnownCategoryType["PartiallyAutomated"] = "PartiallyAutomated";
    /** Manual */
    KnownCategoryType["Manual"] = "Manual";
})(exports.KnownCategoryType || (exports.KnownCategoryType = {}));
/** Known values of {@link CategoryStatus} that the service accepts. */
exports.KnownCategoryStatus = void 0;
(function (KnownCategoryStatus) {
    /** Healthy */
    KnownCategoryStatus["Healthy"] = "Healthy";
    /** Unhealthy */
    KnownCategoryStatus["Unhealthy"] = "Unhealthy";
})(exports.KnownCategoryStatus || (exports.KnownCategoryStatus = {}));
/** Known values of {@link ControlFamilyType} that the service accepts. */
exports.KnownControlFamilyType = void 0;
(function (KnownControlFamilyType) {
    /** FullyAutomated */
    KnownControlFamilyType["FullyAutomated"] = "FullyAutomated";
    /** PartiallyAutomated */
    KnownControlFamilyType["PartiallyAutomated"] = "PartiallyAutomated";
    /** Manual */
    KnownControlFamilyType["Manual"] = "Manual";
})(exports.KnownControlFamilyType || (exports.KnownControlFamilyType = {}));
/** Known values of {@link ControlFamilyStatus} that the service accepts. */
exports.KnownControlFamilyStatus = void 0;
(function (KnownControlFamilyStatus) {
    /** Healthy */
    KnownControlFamilyStatus["Healthy"] = "Healthy";
    /** Unhealthy */
    KnownControlFamilyStatus["Unhealthy"] = "Unhealthy";
})(exports.KnownControlFamilyStatus || (exports.KnownControlFamilyStatus = {}));
/** Known values of {@link ControlType} that the service accepts. */
exports.KnownControlType = void 0;
(function (KnownControlType) {
    /** FullyAutomated */
    KnownControlType["FullyAutomated"] = "FullyAutomated";
    /** PartiallyAutomated */
    KnownControlType["PartiallyAutomated"] = "PartiallyAutomated";
    /** Manual */
    KnownControlType["Manual"] = "Manual";
})(exports.KnownControlType || (exports.KnownControlType = {}));
/** Known values of {@link ControlStatus} that the service accepts. */
exports.KnownControlStatus = void 0;
(function (KnownControlStatus) {
    /** Passed */
    KnownControlStatus["Passed"] = "Passed";
    /** Failed */
    KnownControlStatus["Failed"] = "Failed";
    /** NotApplicable */
    KnownControlStatus["NotApplicable"] = "NotApplicable";
})(exports.KnownControlStatus || (exports.KnownControlStatus = {}));
/** Known values of {@link AssessmentSeverity} that the service accepts. */
exports.KnownAssessmentSeverity = void 0;
(function (KnownAssessmentSeverity) {
    /** High */
    KnownAssessmentSeverity["High"] = "High";
    /** Medium */
    KnownAssessmentSeverity["Medium"] = "Medium";
    /** Low */
    KnownAssessmentSeverity["Low"] = "Low";
})(exports.KnownAssessmentSeverity || (exports.KnownAssessmentSeverity = {}));
/** Known values of {@link IsPass} that the service accepts. */
exports.KnownIsPass = void 0;
(function (KnownIsPass) {
    /** True */
    KnownIsPass["True"] = "True";
    /** False */
    KnownIsPass["False"] = "False";
})(exports.KnownIsPass || (exports.KnownIsPass = {}));
/** Known values of {@link ResourceStatus} that the service accepts. */
exports.KnownResourceStatus = void 0;
(function (KnownResourceStatus) {
    /** Healthy */
    KnownResourceStatus["Healthy"] = "Healthy";
    /** Unhealthy */
    KnownResourceStatus["Unhealthy"] = "Unhealthy";
    /** NotApplicable */
    KnownResourceStatus["NotApplicable"] = "NotApplicable";
})(exports.KnownResourceStatus || (exports.KnownResourceStatus = {}));
/** Known values of {@link DownloadType} that the service accepts. */
exports.KnownDownloadType = void 0;
(function (KnownDownloadType) {
    /** ComplianceReport */
    KnownDownloadType["ComplianceReport"] = "ComplianceReport";
    /** CompliancePdfReport */
    KnownDownloadType["CompliancePdfReport"] = "CompliancePdfReport";
    /** ComplianceDetailedPdfReport */
    KnownDownloadType["ComplianceDetailedPdfReport"] = "ComplianceDetailedPdfReport";
    /** ResourceList */
    KnownDownloadType["ResourceList"] = "ResourceList";
})(exports.KnownDownloadType || (exports.KnownDownloadType = {}));
/** Known values of {@link ComplianceState} that the service accepts. */
exports.KnownComplianceState = void 0;
(function (KnownComplianceState) {
    /** Healthy */
    KnownComplianceState["Healthy"] = "Healthy";
    /** Unhealthy */
    KnownComplianceState["Unhealthy"] = "Unhealthy";
})(exports.KnownComplianceState || (exports.KnownComplianceState = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actionType: {
                serializedName: "actionType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const ReportResourceList = {
    type: {
        name: "Composite",
        className: "ReportResourceList",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReportProperties = {
    type: {
        name: "Composite",
        className: "ReportProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            reportName: {
                serializedName: "reportName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            offerGuid: {
                serializedName: "offerGuid",
                type: {
                    name: "String"
                }
            },
            timeZone: {
                serializedName: "timeZone",
                required: true,
                type: {
                    name: "String"
                }
            },
            triggerTime: {
                serializedName: "triggerTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            nextTriggerTime: {
                serializedName: "nextTriggerTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastTriggerTime: {
                serializedName: "lastTriggerTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            subscriptions: {
                serializedName: "subscriptions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            resources: {
                serializedName: "resources",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceMetadata"
                        }
                    }
                }
            },
            complianceStatus: {
                serializedName: "complianceStatus",
                type: {
                    name: "Composite",
                    className: "ReportComplianceStatus"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceMetadata = {
    type: {
        name: "Composite",
        className: "ResourceMetadata",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            resourceKind: {
                serializedName: "resourceKind",
                type: {
                    name: "String"
                }
            },
            resourceName: {
                serializedName: "resourceName",
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ReportComplianceStatus = {
    type: {
        name: "Composite",
        className: "ReportComplianceStatus",
        modelProperties: {
            m365: {
                serializedName: "m365",
                type: {
                    name: "Composite",
                    className: "OverviewStatus"
                }
            }
        }
    }
};
const OverviewStatus = {
    type: {
        name: "Composite",
        className: "OverviewStatus",
        modelProperties: {
            passedCount: {
                serializedName: "passedCount",
                type: {
                    name: "Number"
                }
            },
            failedCount: {
                serializedName: "failedCount",
                type: {
                    name: "Number"
                }
            },
            manualCount: {
                serializedName: "manualCount",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ReportResourcePatch = {
    type: {
        name: "Composite",
        className: "ReportResourcePatch",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ReportProperties"
                }
            }
        }
    }
};
const SnapshotResourceList = {
    type: {
        name: "Composite",
        className: "SnapshotResourceList",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SnapshotResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SnapshotProperties = {
    type: {
        name: "Composite",
        className: "SnapshotProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            snapshotName: {
                serializedName: "snapshotName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            reportProperties: {
                serializedName: "reportProperties",
                type: {
                    name: "Composite",
                    className: "ReportProperties"
                }
            },
            reportSystemData: {
                serializedName: "reportSystemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            },
            complianceResults: {
                serializedName: "complianceResults",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ComplianceResult"
                        }
                    }
                }
            }
        }
    }
};
const ComplianceResult = {
    type: {
        name: "Composite",
        className: "ComplianceResult",
        modelProperties: {
            complianceName: {
                serializedName: "complianceName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            categories: {
                serializedName: "categories",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Category"
                        }
                    }
                }
            }
        }
    }
};
const Category = {
    type: {
        name: "Composite",
        className: "Category",
        modelProperties: {
            categoryName: {
                serializedName: "categoryName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            categoryType: {
                serializedName: "categoryType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            categoryStatus: {
                serializedName: "categoryStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            controlFamilies: {
                serializedName: "controlFamilies",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ControlFamily"
                        }
                    }
                }
            }
        }
    }
};
const ControlFamily = {
    type: {
        name: "Composite",
        className: "ControlFamily",
        modelProperties: {
            familyName: {
                serializedName: "familyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            familyType: {
                serializedName: "familyType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            familyStatus: {
                serializedName: "familyStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            controls: {
                serializedName: "controls",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Control"
                        }
                    }
                }
            }
        }
    }
};
const Control = {
    type: {
        name: "Composite",
        className: "Control",
        modelProperties: {
            controlId: {
                serializedName: "controlId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            controlShortName: {
                serializedName: "controlShortName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            controlFullName: {
                serializedName: "controlFullName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            controlType: {
                serializedName: "controlType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            controlDescription: {
                serializedName: "controlDescription",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            controlDescriptionHyperLink: {
                serializedName: "controlDescriptionHyperLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            controlStatus: {
                serializedName: "controlStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            assessments: {
                serializedName: "assessments",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Assessment"
                        }
                    }
                }
            }
        }
    }
};
const Assessment = {
    type: {
        name: "Composite",
        className: "Assessment",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            severity: {
                serializedName: "severity",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            remediation: {
                serializedName: "remediation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isPass: {
                serializedName: "isPass",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            policyId: {
                serializedName: "policyId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceList: {
                serializedName: "resourceList",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AssessmentResource"
                        }
                    }
                }
            }
        }
    }
};
const AssessmentResource = {
    type: {
        name: "Composite",
        className: "AssessmentResource",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceStatus: {
                serializedName: "resourceStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            reason: {
                serializedName: "reason",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            statusChangeDate: {
                serializedName: "statusChangeDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SnapshotDownloadRequest = {
    type: {
        name: "Composite",
        className: "SnapshotDownloadRequest",
        modelProperties: {
            reportCreatorTenantId: {
                serializedName: "reportCreatorTenantId",
                type: {
                    name: "String"
                }
            },
            downloadType: {
                serializedName: "downloadType",
                required: true,
                type: {
                    name: "String"
                }
            },
            offerGuid: {
                constraints: {
                    MinLength: 1
                },
                serializedName: "offerGuid",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DownloadResponse = {
    type: {
        name: "Composite",
        className: "DownloadResponse",
        modelProperties: {
            resourceList: {
                serializedName: "resourceList",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceItem"
                        }
                    }
                }
            },
            complianceReport: {
                serializedName: "complianceReport",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ComplianceReportItem"
                        }
                    }
                }
            },
            compliancePdfReport: {
                serializedName: "compliancePdfReport",
                type: {
                    name: "Composite",
                    className: "DownloadResponseCompliancePdfReport"
                }
            },
            complianceDetailedPdfReport: {
                serializedName: "complianceDetailedPdfReport",
                type: {
                    name: "Composite",
                    className: "DownloadResponseComplianceDetailedPdfReport"
                }
            }
        }
    }
};
const ResourceItem = {
    type: {
        name: "Composite",
        className: "ResourceItem",
        modelProperties: {
            subscriptionId: {
                serializedName: "subscriptionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceType: {
                serializedName: "resourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceId: {
                serializedName: "resourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComplianceReportItem = {
    type: {
        name: "Composite",
        className: "ComplianceReportItem",
        modelProperties: {
            categoryName: {
                serializedName: "categoryName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            controlId: {
                serializedName: "controlId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            controlName: {
                serializedName: "controlName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            controlType: {
                serializedName: "controlType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            complianceState: {
                serializedName: "complianceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            policyId: {
                serializedName: "policyId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            policyDisplayName: {
                serializedName: "policyDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            policyDescription: {
                serializedName: "policyDescription",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceType: {
                serializedName: "resourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceId: {
                serializedName: "resourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            statusChangeDate: {
                serializedName: "statusChangeDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DownloadResponseCompliancePdfReport = {
    type: {
        name: "Composite",
        className: "DownloadResponseCompliancePdfReport",
        modelProperties: {
            sasUri: {
                serializedName: "sasUri",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DownloadResponseComplianceDetailedPdfReport = {
    type: {
        name: "Composite",
        className: "DownloadResponseComplianceDetailedPdfReport",
        modelProperties: {
            sasUri: {
                serializedName: "sasUri",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const ReportResource = {
    type: {
        name: "Composite",
        className: "ReportResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ReportProperties"
                }
            } })
    }
};
const SnapshotResource = {
    type: {
        name: "Composite",
        className: "SnapshotResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SnapshotProperties"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    ErrorResponse: ErrorResponse,
    ErrorDetail: ErrorDetail,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    ReportResourceList: ReportResourceList,
    ReportProperties: ReportProperties,
    ResourceMetadata: ResourceMetadata,
    ReportComplianceStatus: ReportComplianceStatus,
    OverviewStatus: OverviewStatus,
    Resource: Resource,
    SystemData: SystemData,
    ReportResourcePatch: ReportResourcePatch,
    SnapshotResourceList: SnapshotResourceList,
    SnapshotProperties: SnapshotProperties,
    ComplianceResult: ComplianceResult,
    Category: Category,
    ControlFamily: ControlFamily,
    Control: Control,
    Assessment: Assessment,
    AssessmentResource: AssessmentResource,
    SnapshotDownloadRequest: SnapshotDownloadRequest,
    DownloadResponse: DownloadResponse,
    ResourceItem: ResourceItem,
    ComplianceReportItem: ComplianceReportItem,
    DownloadResponseCompliancePdfReport: DownloadResponseCompliancePdfReport,
    DownloadResponseComplianceDetailedPdfReport: DownloadResponseComplianceDetailedPdfReport,
    ProxyResource: ProxyResource,
    ReportResource: ReportResource,
    SnapshotResource: SnapshotResource
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-11-16-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String"
        }
    }
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        constraints: {
            InclusiveMaximum: 100,
            InclusiveMinimum: 1
        },
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const select = {
    parameterPath: ["options", "select"],
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "$select",
        type: {
            name: "String"
        }
    }
};
const offerGuid = {
    parameterPath: ["options", "offerGuid"],
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "offerGuid",
        type: {
            name: "String"
        }
    }
};
const reportCreatorTenantId = {
    parameterPath: ["options", "reportCreatorTenantId"],
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "reportCreatorTenantId",
        type: {
            name: "String"
        }
    }
};
const reportName = {
    parameterPath: "reportName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-a-zA-Z0-9_]+$")
        },
        serializedName: "reportName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: ReportResource
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: ReportResourcePatch
};
const snapshotName = {
    parameterPath: "snapshotName",
    mapper: {
        serializedName: "snapshotName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: SnapshotDownloadRequest
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available REST API operations of the Microsoft.AppComplianceAutomation provider.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available REST API operations of the Microsoft.AppComplianceAutomation provider.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$2);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/providers/Microsoft.AppComplianceAutomation/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Reports operations. */
class ReportsImpl {
    /**
     * Initialize a new instance of the class Reports class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the AppComplianceAutomation report list for the tenant.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the AppComplianceAutomation report list for the tenant.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/providers/Microsoft.AppComplianceAutomation/reports",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReportResourceList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        skipToken,
        top,
        select,
        offerGuid,
        reportCreatorTenantId
    ],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$3
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReportResourceList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        skipToken,
        top,
        select,
        offerGuid,
        reportCreatorTenantId
    ],
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Report operations. */
class ReportImpl {
    /**
     * Initialize a new instance of the class Report class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the AppComplianceAutomation report and its properties.
     * @param reportName Report Name.
     * @param options The options parameters.
     */
    get(reportName, options) {
        return this.client.sendOperationRequest({ reportName, options }, getOperationSpec$1);
    }
    /**
     * Create a new AppComplianceAutomation report or update an exiting AppComplianceAutomation report.
     * @param reportName Report Name.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(reportName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { reportName, parameters, options }, createOrUpdateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a new AppComplianceAutomation report or update an exiting AppComplianceAutomation report.
     * @param reportName Report Name.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(reportName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(reportName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update an exiting AppComplianceAutomation report.
     * @param reportName Report Name.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginUpdate(reportName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { reportName, parameters, options }, updateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update an exiting AppComplianceAutomation report.
     * @param reportName Report Name.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(reportName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(reportName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete an AppComplianceAutomation report.
     * @param reportName Report Name.
     * @param options The options parameters.
     */
    beginDelete(reportName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { reportName, options }, deleteOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete an AppComplianceAutomation report.
     * @param reportName Report Name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(reportName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(reportName, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReportResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, reportName],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateOperationSpec = {
    path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ReportResource
        },
        201: {
            bodyMapper: ReportResource
        },
        202: {
            bodyMapper: ReportResource
        },
        204: {
            bodyMapper: ReportResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [$host, reportName],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const updateOperationSpec = {
    path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ReportResource
        },
        201: {
            bodyMapper: ReportResource
        },
        202: {
            bodyMapper: ReportResource
        },
        204: {
            bodyMapper: ReportResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [$host, reportName],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec = {
    path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, reportName],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Snapshots operations. */
class SnapshotsImpl {
    /**
     * Initialize a new instance of the class Snapshots class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the AppComplianceAutomation snapshot list.
     * @param reportName Report Name.
     * @param options The options parameters.
     */
    list(reportName, options) {
        const iter = this.listPagingAll(reportName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(reportName, options, settings);
            }
        };
    }
    listPagingPage(reportName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(reportName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(reportName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(reportName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(reportName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the AppComplianceAutomation snapshot list.
     * @param reportName Report Name.
     * @param options The options parameters.
     */
    _list(reportName, options) {
        return this.client.sendOperationRequest({ reportName, options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param reportName Report Name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(reportName, nextLink, options) {
        return this.client.sendOperationRequest({ reportName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/snapshots",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SnapshotResourceList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        skipToken,
        top,
        select,
        offerGuid,
        reportCreatorTenantId
    ],
    urlParameters: [$host, reportName],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SnapshotResourceList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        skipToken,
        top,
        select,
        offerGuid,
        reportCreatorTenantId
    ],
    urlParameters: [$host, nextLink, reportName],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Snapshot operations. */
class SnapshotImpl {
    /**
     * Initialize a new instance of the class Snapshot class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the AppComplianceAutomation snapshot and its properties.
     * @param reportName Report Name.
     * @param snapshotName Snapshot Name.
     * @param options The options parameters.
     */
    get(reportName, snapshotName, options) {
        return this.client.sendOperationRequest({ reportName, snapshotName, options }, getOperationSpec);
    }
    /**
     * Download compliance needs from snapshot, like: Compliance Report, Resource List.
     * @param reportName Report Name.
     * @param snapshotName Snapshot Name.
     * @param parameters Parameters for the query operation
     * @param options The options parameters.
     */
    beginDownload(reportName, snapshotName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { reportName, snapshotName, parameters, options }, downloadOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Download compliance needs from snapshot, like: Compliance Report, Resource List.
     * @param reportName Report Name.
     * @param snapshotName Snapshot Name.
     * @param parameters Parameters for the query operation
     * @param options The options parameters.
     */
    beginDownloadAndWait(reportName, snapshotName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDownload(reportName, snapshotName, parameters, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/snapshots/{snapshotName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SnapshotResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        reportName,
        snapshotName
    ],
    headerParameters: [accept],
    serializer
};
const downloadOperationSpec = {
    path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/snapshots/{snapshotName}/download",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DownloadResponse
        },
        201: {
            bodyMapper: DownloadResponse
        },
        202: {
            bodyMapper: DownloadResponse
        },
        204: {
            bodyMapper: DownloadResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        reportName,
        snapshotName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class AppComplianceAutomationToolForMicrosoft365 extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the AppComplianceAutomationToolForMicrosoft365 class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-appcomplianceautomation/1.0.0-beta.1`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2022-11-16-preview";
        this.operations = new OperationsImpl(this);
        this.reports = new ReportsImpl(this);
        this.report = new ReportImpl(this);
        this.snapshots = new SnapshotsImpl(this);
        this.snapshot = new SnapshotImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.AppComplianceAutomationToolForMicrosoft365 = AppComplianceAutomationToolForMicrosoft365;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
