{"version":3,"file":"PerformanceClient.js","sources":["../../../src/telemetry/performance/PerformanceClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ApplicationTelemetry } from \"../../config/ClientConfiguration\";\nimport { Logger } from \"../../logger/Logger\";\nimport { InProgressPerformanceEvent, IPerformanceClient, PerformanceCallbackFunction, QueueMeasurement } from \"./IPerformanceClient\";\nimport { IPerformanceMeasurement } from \"./IPerformanceMeasurement\";\nimport {\n    Counters,\n    PerformanceEvent,\n    IntFields,\n    PerformanceEvents,\n    PerformanceEventStatus,\n    StaticFields\n} from \"./PerformanceEvent\";\n\nexport abstract class PerformanceClient implements IPerformanceClient {\n    protected authority: string;\n    protected libraryName: string;\n    protected libraryVersion: string;\n    protected applicationTelemetry: ApplicationTelemetry;\n    protected clientId: string;\n    protected logger: Logger;\n    protected callbacks: Map<string, PerformanceCallbackFunction>;\n\n    /**\n     * Multiple events with the same correlation id.\n     * Double keyed by correlation id and event id.\n     * @protected\n     * @type {Map<string, Map<string, PerformanceEvent>>}\n     */\n    protected eventsByCorrelationId: Map<string, Map<string, PerformanceEvent>>;\n\n    /**\n     * Fields to be emitted which are scoped to the top level request and whose value will not change in submeasurements\n     * For example: App name, version, etc.\n     */\n    protected staticFieldsByCorrelationId: Map<string, StaticFields>;\n\n    /**\n     * Counters to be emitted which are scoped to the top level request and whose value may change in sub-measurements\n     */\n    protected countersByCorrelationId: Map<string, Counters>;\n\n    /**\n     * Underlying performance measurements for each operation\n     *\n     * @protected\n     * @type {Map<string, IPerformanceMeasurement>}\n     */\n    protected measurementsById: Map<string, IPerformanceMeasurement>;\n\n    /**\n     * Map of pre-queue times by correlation Id\n     *\n     * @protected\n     * @type {Map<string, Map<string, number>>}\n     */\n    protected preQueueTimeByCorrelationId: Map<string, Map<string, number>>;\n\n    /**\n     * Map of queue measurements by correlation Id\n     *\n     * @protected\n     * @type {Map<string, Array<QueueMeasurement>>}\n     */\n    protected queueMeasurements: Map<string, Array<QueueMeasurement>>;\n\n    /**\n     * Creates an instance of PerformanceClient,\n     * an abstract class containing core performance telemetry logic.\n     *\n     * @constructor\n     * @param {string} clientId Client ID of the application\n     * @param {string} authority Authority used by the application\n     * @param {Logger} logger Logger used by the application\n     * @param {string} libraryName Name of the library\n     * @param {string} libraryVersion Version of the library\n     */\n    constructor(clientId: string, authority: string, logger: Logger, libraryName: string, libraryVersion: string, applicationTelemetry: ApplicationTelemetry) {\n        this.authority = authority;\n        this.libraryName = libraryName;\n        this.libraryVersion = libraryVersion;\n        this.applicationTelemetry = applicationTelemetry;\n        this.clientId = clientId;\n        this.logger = logger;\n        this.callbacks = new Map();\n        this.eventsByCorrelationId = new Map();\n        this.staticFieldsByCorrelationId = new Map();\n        this.measurementsById = new Map();\n        this.queueMeasurements = new Map();\n        this.preQueueTimeByCorrelationId = new Map();\n        this.countersByCorrelationId = new Map();\n    }\n\n    /**\n     * Generates and returns a unique id, typically a guid.\n     *\n     * @abstract\n     * @returns {string}\n     */\n    abstract generateId(): string;\n\n    /**\n     * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\n     * Note: this function can be changed to abstract at the next major version bump.\n     *\n     * @param {string} measureName\n     * @param {string} correlationId\n     * @returns {IPerformanceMeasurement}\n     */\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n    startPerformanceMeasurement(measureName: string, correlationId: string): IPerformanceMeasurement {\n        return {} as IPerformanceMeasurement;\n    }\n\n    /**\n     * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\n     * Note: this incorrectly-named function will be removed at the next major version bump.\n     *\n     * @param {string} measureName\n     * @param {string} correlationId\n     * @returns {IPerformanceMeasurement}\n     */\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n    startPerformanceMeasuremeant(measureName: string, correlationId: string): IPerformanceMeasurement {\n        return {} as IPerformanceMeasurement;\n    }\n\n    /**\n     * Sets pre-queue time by correlation Id\n     *\n     * @abstract\n     * @param {PerformanceEvents} eventName\n     * @param {string} correlationId\n     * @returns\n     */\n    abstract setPreQueueTime(eventName: PerformanceEvents, correlationId?: string): void;\n\n    /**\n     * Get integral fields.\n     * Override to change the set.\n     */\n    getIntFields(): ReadonlySet<string> {\n        return IntFields;\n    }\n\n    /**\n     * Gets map of pre-queue times by correlation Id\n     *\n     * @param {PerformanceEvents} eventName\n     * @param {string} correlationId\n     * @returns {number}\n     */\n    getPreQueueTime(eventName: PerformanceEvents, correlationId: string): number | void {\n        const preQueueTimesByEvents = this.preQueueTimeByCorrelationId.get(correlationId);\n\n        if (!preQueueTimesByEvents) {\n            this.logger.trace(`PerformanceClient.getPreQueueTime: no pre-queue times found for correlationId: ${correlationId}, unable to add queue measurement`);\n            return;\n        } else if (!preQueueTimesByEvents.get(eventName)) {\n            this.logger.trace(`PerformanceClient.getPreQueueTime: no pre-queue time found for ${eventName}, unable to add queue measurement`);\n            return;\n        }\n\n        return preQueueTimesByEvents.get(eventName);\n    }\n\n    /**\n     * Calculates the difference between current time and time when function was queued.\n     * Note: It is possible to have 0 as the queue time if the current time and the queued time was the same.\n     *\n     * @param {number} preQueueTime\n     * @param {number} currentTime\n     * @returns {number}\n     */\n    calculateQueuedTime(preQueueTime: number, currentTime: number): number {\n        if (preQueueTime < 1) {\n            this.logger.trace(`PerformanceClient: preQueueTime should be a positive integer and not ${preQueueTime}`);\n            return 0;\n        }\n\n        if (currentTime < 1) {\n            this.logger.trace(`PerformanceClient: currentTime should be a positive integer and not ${currentTime}`);\n            return 0;\n        }\n\n        if (currentTime < preQueueTime) {\n            this.logger.trace(\"PerformanceClient: currentTime is less than preQueueTime, check how time is being retrieved\");\n            return 0;\n        }\n\n        return currentTime-preQueueTime;\n    }\n\n    /**\n     * Adds queue measurement time to QueueMeasurements array for given correlation ID.\n     *\n     * @param {PerformanceEvents} name\n     * @param {?string} correlationId\n     * @param {?number} time\n     * @returns\n     */\n    addQueueMeasurement(eventName: PerformanceEvents, correlationId?: string, queueTime?: number): void {\n        if (!correlationId) {\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: correlationId not provided for ${eventName}, cannot add queue measurement`);\n            return;\n        }\n\n        if (queueTime === 0) {\n            // Possible for there to be no queue time after calculation\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: queue time provided for ${eventName} is ${queueTime}`);\n        } else if (!queueTime) {\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: no queue time provided for ${eventName}`);\n            return;\n        }\n\n        const queueMeasurement = {eventName, queueTime} as QueueMeasurement;\n\n        // Adds to existing correlation Id if present in queueMeasurements\n        const existingMeasurements = this.queueMeasurements.get(correlationId);\n        if (existingMeasurements) {\n            existingMeasurements.push(queueMeasurement);\n            this.queueMeasurements.set(correlationId, existingMeasurements);\n        } else {\n            // Sets new correlation Id if not present in queueMeasurements\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: adding correlationId ${correlationId} to queue measurements`);\n            const measurementArray = [queueMeasurement];\n            this.queueMeasurements.set(correlationId, measurementArray);\n        }\n    }\n\n    /**\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\n     *\n     * @param {PerformanceEvents} measureName\n     * @param {?string} [correlationId]\n     * @returns {InProgressPerformanceEvent}\n     */\n    startMeasurement(measureName: PerformanceEvents, correlationId?: string): InProgressPerformanceEvent {\n        // Generate a placeholder correlation if the request does not provide one\n        const eventCorrelationId = correlationId || this.generateId();\n        if (!correlationId) {\n            this.logger.info(`PerformanceClient: No correlation id provided for ${measureName}, generating`, eventCorrelationId);\n        }\n\n        // Duplicate code to address spelling error will be removed at the next major version bump.\n        this.logger.trace(`PerformanceClient: Performance measurement started for ${measureName}`, eventCorrelationId);\n        let validMeasurement: IPerformanceMeasurement;\n        const performanceMeasuremeant = this.startPerformanceMeasuremeant(measureName, eventCorrelationId);\n        if (performanceMeasuremeant.startMeasurement) {\n            performanceMeasuremeant.startMeasurement();\n            validMeasurement = performanceMeasuremeant;\n        } else {\n            const performanceMeasurement = this.startPerformanceMeasurement(measureName, eventCorrelationId);\n            performanceMeasurement.startMeasurement();\n            validMeasurement = performanceMeasurement;\n        }\n\n        const inProgressEvent: PerformanceEvent = {\n            eventId: this.generateId(),\n            status: PerformanceEventStatus.InProgress,\n            authority: this.authority,\n            libraryName: this.libraryName,\n            libraryVersion: this.libraryVersion,\n            clientId: this.clientId,\n            name: measureName,\n            startTimeMs: Date.now(),\n            correlationId: eventCorrelationId,\n        };\n\n        // Store in progress events so they can be discarded if not ended properly\n        this.cacheEventByCorrelationId(inProgressEvent);\n\n        const staticFields: StaticFields = {\n            appName: this.applicationTelemetry?.appName,\n            appVersion: this.applicationTelemetry?.appVersion,\n        };\n        this.addStaticFields(staticFields, eventCorrelationId);\n        this.cacheMeasurement(inProgressEvent, validMeasurement);\n\n        // Return the event and functions the caller can use to properly end/flush the measurement\n        return {\n            endMeasurement: (event?: Partial<PerformanceEvent>): PerformanceEvent | null => {\n                const completedEvent = this.endMeasurement({\n                    // Initial set of event properties\n                    ...inProgressEvent,\n                    // Properties set when event ends\n                    ...event\n                });\n\n                if (completedEvent) {\n                    // Cache event so that submeasurements can be added downstream\n                    this.cacheEventByCorrelationId(completedEvent);\n                }\n                return completedEvent;\n            },\n            flushMeasurement: () => {\n                return this.flushMeasurements(inProgressEvent.name, inProgressEvent.correlationId);\n            },\n            discardMeasurement: () => {\n                return this.discardMeasurements(inProgressEvent.correlationId);\n            },\n            addStaticFields: (fields: StaticFields) => {\n                return this.addStaticFields(fields, inProgressEvent.correlationId);\n            },\n            increment: (counters: Counters) => {\n                return this.increment(counters, inProgressEvent.correlationId);\n            },\n            measurement: validMeasurement,\n            event: inProgressEvent\n        };\n\n    }\n\n    /**\n     * Stops measuring the performance for an operation. Should only be called directly by PerformanceClient classes,\n     * as consumers should instead use the function returned by startMeasurement.\n     *\n     * @param {PerformanceEvent} event\n     * @returns {(PerformanceEvent | null)}\n     */\n    endMeasurement(event: PerformanceEvent): PerformanceEvent | null {\n        const performanceMeasurement = this.measurementsById.get(event.eventId);\n        if (performanceMeasurement) {\n            // Immediately delete so that the same event isnt ended twice\n            this.measurementsById.delete(event.eventId);\n            performanceMeasurement.endMeasurement();\n            const durationMs = performanceMeasurement.flushMeasurement();\n            // null indicates no measurement was taken (e.g. needed performance APIs not present)\n            if (durationMs !== null) {\n                this.logger.trace(`PerformanceClient: Performance measurement ended for ${event.name}: ${durationMs} ms`, event.correlationId);\n                const completedEvent: PerformanceEvent = {\n                    // Allow duration to be overwritten when event ends (e.g. testing), but not status\n                    durationMs: Math.round(durationMs),\n                    ...event,\n                    status: PerformanceEventStatus.Completed,\n                };\n\n                return completedEvent;\n            } else {\n                this.logger.trace(\"PerformanceClient: Performance measurement not taken\", event.correlationId);\n            }\n        } else {\n            this.logger.trace(`PerformanceClient: Measurement not found for ${event.eventId}`, event.correlationId);\n        }\n\n        return null;\n    }\n\n    /**\n     * Saves extra information to be emitted when the measurements are flushed\n     * @param fields\n     * @param correlationId\n     */\n    addStaticFields(fields: StaticFields, correlationId: string) : void{\n        const existingStaticFields = this.staticFieldsByCorrelationId.get(correlationId);\n        if (existingStaticFields) {\n            this.logger.trace(\"PerformanceClient: Updating static fields\");\n            this.staticFieldsByCorrelationId.set(correlationId, {...existingStaticFields, ...fields});\n        } else {\n            this.logger.trace(\"PerformanceClient: Adding static fields\");\n            this.staticFieldsByCorrelationId.set(correlationId, fields);\n        }\n    }\n\n    /**\n     * Increment counters to be emitted when the measurements are flushed\n     * @param counters {Counters}\n     * @param correlationId {string} correlation identifier\n     */\n    increment(counters: Counters, correlationId: string): void {\n        const existing: Counters | undefined = this.countersByCorrelationId.get(correlationId);\n        if (!existing) {\n            this.logger.trace(\"PerformanceClient: Setting counters\");\n            this.countersByCorrelationId.set(correlationId, { ...counters });\n            return;\n        }\n\n        this.logger.trace(\"PerformanceClient: Updating counters\");\n        for (const counter in counters) {\n            if (!existing.hasOwnProperty(counter)) {\n                existing[counter] = 0;\n            }\n            existing[counter] += counters[counter];\n        }\n    }\n\n    /**\n     * Upserts event into event cache.\n     * First key is the correlation id, second key is the event id.\n     * Allows for events to be grouped by correlation id,\n     * and to easily allow for properties on them to be updated.\n     *\n     * @private\n     * @param {PerformanceEvent} event\n     */\n    private cacheEventByCorrelationId(event: PerformanceEvent) {\n        const existingEvents = this.eventsByCorrelationId.get(event.correlationId);\n        if (existingEvents) {\n            this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} added/updated`, event.correlationId);\n            existingEvents.set(event.eventId, event);\n        } else {\n            this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} started`, event.correlationId);\n            this.eventsByCorrelationId.set(event.correlationId, new Map().set(event.eventId, event));\n        }\n    }\n\n    /**\n     * Cache measurements by their id.\n     *\n     * @private\n     * @param {PerformanceEvent} event\n     * @param {IPerformanceMeasurement} measurement\n     */\n    private cacheMeasurement(event: PerformanceEvent, measurement: IPerformanceMeasurement) {\n        this.measurementsById.set(event.eventId, measurement);\n    }\n\n    /**\n     * Gathers and emits performance events for measurements taked for the given top-level API and correlation ID.\n     *\n     * @param {PerformanceEvents} measureName\n     * @param {string} correlationId\n     */\n    flushMeasurements(measureName: PerformanceEvents, correlationId: string): void {\n        this.logger.trace(`PerformanceClient: Performance measurements flushed for ${measureName}`, correlationId);\n\n        /**\n         * Adds all queue time and count measurements for given correlation ID\n         * then deletes queue times for given correlation ID from queueMeasurements map.\n         */\n\n        const queueMeasurementForCorrelationId = this.queueMeasurements.get(correlationId);\n        if (!queueMeasurementForCorrelationId) {\n            this.logger.trace(`PerformanceClient: no queue measurements found for for correlationId: ${correlationId}`);\n        }\n\n        let totalQueueTime = 0;\n        let totalQueueCount = 0;\n        queueMeasurementForCorrelationId?.forEach((measurement) => {\n            totalQueueTime += measurement.queueTime;\n            totalQueueCount++;\n        });\n\n        const eventsForCorrelationId = this.eventsByCorrelationId.get(correlationId);\n        const staticFields = this.staticFieldsByCorrelationId.get(correlationId);\n        const counters = this.countersByCorrelationId.get(correlationId);\n\n        if (eventsForCorrelationId) {\n            this.discardCache(correlationId);\n\n            /*\n             * Manually end incomplete submeasurements to ensure there arent orphaned/never ending events.\n             * Incomplete submeasurements are likely an instrumentation bug that should be fixed.\n             * IE only supports Map.forEach.\n             */\n            const completedEvents: PerformanceEvent[] = [];\n            let incompleteSubsCount: number = 0;\n\n            eventsForCorrelationId.forEach(event => {\n                if (event.name !== measureName && event.status !== PerformanceEventStatus.Completed) {\n                    this.logger.trace(`PerformanceClient: Incomplete submeasurement ${event.name} found for ${measureName}`, correlationId);\n                    incompleteSubsCount++;\n\n                    const completedEvent = this.endMeasurement(event);\n                    if (completedEvent) {\n                        completedEvents.push(completedEvent);\n                    }\n                }\n\n                completedEvents.push(event);\n            });\n\n            // Sort events by start time (earliest first)\n            const sortedCompletedEvents = completedEvents.sort((eventA, eventB) => eventA.startTimeMs - eventB.startTimeMs);\n\n            // Take completed top level event and add completed submeasurements durations as properties\n            const topLevelEvents = sortedCompletedEvents.filter(event => event.name === measureName && event.status === PerformanceEventStatus.Completed);\n            if (topLevelEvents.length > 0) {\n                /*\n                 * Only take the first top-level event if there are multiple events with the same correlation id.\n                 * This greatly simplifies logic for submeasurements.\n                 */\n                if (topLevelEvents.length > 1) {\n                    this.logger.verbose(\"PerformanceClient: Multiple distinct top-level performance events found, using the first\", correlationId);\n                }\n                const topLevelEvent = topLevelEvents[0];\n                this.logger.verbose(`PerformanceClient: Measurement found for ${measureName}`, correlationId);\n\n                // Build event object with top level and sub measurements\n                const eventToEmit = sortedCompletedEvents.reduce((previous, current) => {\n                    if (current.name !== measureName) {\n                        this.logger.trace(`PerformanceClient: Complete submeasurement found for ${current.name}`, correlationId);\n                        // TODO: Emit additional properties for each subMeasurement\n                        const subMeasurementName = `${current.name}DurationMs`;\n                        /*\n                         * Some code paths, such as resolving an authority, can occur multiple times.\n                         * Only take the first measurement, since the second could be read from the cache,\n                         * or due to the same correlation id being used for two distinct requests.\n                         */\n                        if (!previous[subMeasurementName]) {\n                            previous[subMeasurementName] = current.durationMs;\n                        } else {\n                            this.logger.verbose(`PerformanceClient: Submeasurement for ${measureName} already exists for ${current.name}, ignoring`, correlationId);\n                        }\n                    }\n\n                    return previous;\n                }, topLevelEvent);\n\n                const finalEvent: PerformanceEvent = {\n                    ...eventToEmit,\n                    ...staticFields,\n                    ...counters,\n                    queuedTimeMs: totalQueueTime,\n                    queuedCount: totalQueueCount,\n                    incompleteSubsCount\n                };\n                this.truncateIntegralFields(finalEvent, this.getIntFields());\n\n                this.emitEvents([finalEvent], eventToEmit.correlationId);\n            } else {\n                this.logger.verbose(`PerformanceClient: No completed top-level measurements found for ${measureName}`, correlationId);\n            }\n        } else {\n            this.logger.verbose(\"PerformanceClient: No measurements found\", correlationId);\n        }\n    }\n\n    /**\n     * Removes measurements for a given correlation id.\n     *\n     * @param {string} correlationId\n     */\n    discardMeasurements(correlationId: string): void {\n        this.logger.trace(\"PerformanceClient: Performance measurements discarded\", correlationId);\n        this.eventsByCorrelationId.delete(correlationId);\n    }\n\n    /**\n     * Removes cache for a given correlation id.\n     *\n     * @param {string} correlation identifier\n     */\n    private discardCache(correlationId: string): void {\n        this.discardMeasurements(correlationId);\n\n        this.logger.trace(\"PerformanceClient: Static fields discarded\", correlationId);\n        this.staticFieldsByCorrelationId.delete(correlationId);\n\n        this.logger.trace(\"PerformanceClient: Counters discarded\", correlationId);\n        this.countersByCorrelationId.delete(correlationId);\n\n        this.logger.trace(\"PerformanceClient: QueueMeasurements discarded\", correlationId);\n        this.queueMeasurements.delete(correlationId);\n\n        this.logger.trace(\"PerformanceClient: Pre-queue times discarded\", correlationId);\n        this.preQueueTimeByCorrelationId.delete(correlationId);\n    }\n\n    /**\n     * Registers a callback function to receive performance events.\n     *\n     * @param {PerformanceCallbackFunction} callback\n     * @returns {string}\n     */\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\n        const callbackId = this.generateId();\n        this.callbacks.set(callbackId, callback);\n        this.logger.verbose(`PerformanceClient: Performance callback registered with id: ${callbackId}`);\n\n        return callbackId;\n    }\n\n    /**\n     * Removes a callback registered with addPerformanceCallback.\n     *\n     * @param {string} callbackId\n     * @returns {boolean}\n     */\n    removePerformanceCallback(callbackId: string): boolean {\n        const result = this.callbacks.delete(callbackId);\n\n        if (result) {\n            this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} removed.`);\n        } else {\n            this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} not removed.`);\n        }\n\n        return result;\n    }\n\n    /**\n     * Emits events to all registered callbacks.\n     *\n     * @param {PerformanceEvent[]} events\n     * @param {?string} [correlationId]\n     */\n    emitEvents(events: PerformanceEvent[], correlationId: string): void {\n        this.logger.verbose(\"PerformanceClient: Emitting performance events\", correlationId);\n\n        this.callbacks.forEach((callback: PerformanceCallbackFunction, callbackId: string) => {\n            this.logger.trace(`PerformanceClient: Emitting event to callback ${callbackId}`, correlationId);\n            callback.apply(null, [events]);\n        });\n    }\n\n    /**\n     * Enforce truncation of integral fields in performance event.\n     * @param {PerformanceEvent} event performance event to update.\n     * @param {Set<string>} intFields integral fields.\n     */\n    private truncateIntegralFields(event: PerformanceEvent, intFields: ReadonlySet<string>): void {\n        intFields.forEach((key) => {\n            if (key in event && typeof event[key] === \"number\") {\n                event[key] = Math.floor(event[key]);\n            }\n        });\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA;;;AAGG;AAeH,IAAA,iBAAA,kBAAA,YAAA;AAoDI;;;;;;;;;;AAUG;IACH,SAAY,iBAAA,CAAA,QAAgB,EAAE,SAAiB,EAAE,MAAc,EAAE,WAAmB,EAAE,cAAsB,EAAE,oBAA0C,EAAA;AACpJ,QAAA,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC3B,QAAA,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AAC/B,QAAA,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;AACrC,QAAA,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;AACjD,QAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACzB,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,QAAA,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;AAC3B,QAAA,IAAI,CAAC,qBAAqB,GAAG,IAAI,GAAG,EAAE,CAAC;AACvC,QAAA,IAAI,CAAC,2BAA2B,GAAG,IAAI,GAAG,EAAE,CAAC;AAC7C,QAAA,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;AAClC,QAAA,IAAI,CAAC,iBAAiB,GAAG,IAAI,GAAG,EAAE,CAAC;AACnC,QAAA,IAAI,CAAC,2BAA2B,GAAG,IAAI,GAAG,EAAE,CAAC;AAC7C,QAAA,IAAI,CAAC,uBAAuB,GAAG,IAAI,GAAG,EAAE,CAAC;KAC5C;AAUD;;;;;;;AAOG;;AAEH,IAAA,iBAAA,CAAA,SAAA,CAAA,2BAA2B,GAA3B,UAA4B,WAAmB,EAAE,aAAqB,EAAA;AAClE,QAAA,OAAO,EAA6B,CAAC;KACxC,CAAA;AAED;;;;;;;AAOG;;AAEH,IAAA,iBAAA,CAAA,SAAA,CAAA,4BAA4B,GAA5B,UAA6B,WAAmB,EAAE,aAAqB,EAAA;AACnE,QAAA,OAAO,EAA6B,CAAC;KACxC,CAAA;AAYD;;;AAGG;AACH,IAAA,iBAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,YAAA;AACI,QAAA,OAAO,SAAS,CAAC;KACpB,CAAA;AAED;;;;;;AAMG;AACH,IAAA,iBAAA,CAAA,SAAA,CAAA,eAAe,GAAf,UAAgB,SAA4B,EAAE,aAAqB,EAAA;QAC/D,IAAM,qBAAqB,GAAG,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAElF,IAAI,CAAC,qBAAqB,EAAE;YACxB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iFAAkF,GAAA,aAAa,GAAmC,mCAAA,CAAC,CAAC;YACtJ,OAAO;AACV,SAAA;AAAM,aAAA,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YAC9C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iEAAkE,GAAA,SAAS,GAAmC,mCAAA,CAAC,CAAC;YAClI,OAAO;AACV,SAAA;AAED,QAAA,OAAO,qBAAqB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;KAC/C,CAAA;AAED;;;;;;;AAOG;AACH,IAAA,iBAAA,CAAA,SAAA,CAAA,mBAAmB,GAAnB,UAAoB,YAAoB,EAAE,WAAmB,EAAA;QACzD,IAAI,YAAY,GAAG,CAAC,EAAE;YAClB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uEAAwE,GAAA,YAAc,CAAC,CAAC;AAC1G,YAAA,OAAO,CAAC,CAAC;AACZ,SAAA;QAED,IAAI,WAAW,GAAG,CAAC,EAAE;YACjB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,sEAAuE,GAAA,WAAa,CAAC,CAAC;AACxG,YAAA,OAAO,CAAC,CAAC;AACZ,SAAA;QAED,IAAI,WAAW,GAAG,YAAY,EAAE;AAC5B,YAAA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6FAA6F,CAAC,CAAC;AACjH,YAAA,OAAO,CAAC,CAAC;AACZ,SAAA;QAED,OAAO,WAAW,GAAC,YAAY,CAAC;KACnC,CAAA;AAED;;;;;;;AAOG;AACH,IAAA,iBAAA,CAAA,SAAA,CAAA,mBAAmB,GAAnB,UAAoB,SAA4B,EAAE,aAAsB,EAAE,SAAkB,EAAA;QACxF,IAAI,CAAC,aAAa,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wEAAyE,GAAA,SAAS,GAAgC,gCAAA,CAAC,CAAC;YACtI,OAAO;AACV,SAAA;QAED,IAAI,SAAS,KAAK,CAAC,EAAE;;YAEjB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,oEAAkE,SAAS,GAAA,MAAA,GAAO,SAAW,CAAC,CAAC;AACpH,SAAA;aAAM,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,oEAAqE,GAAA,SAAW,CAAC,CAAC;YACpG,OAAO;AACV,SAAA;QAED,IAAM,gBAAgB,GAAG,EAAC,SAAS,WAAA,EAAE,SAAS,EAAA,SAAA,EAAqB,CAAC;;QAGpE,IAAM,oBAAoB,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AACvE,QAAA,IAAI,oBAAoB,EAAE;AACtB,YAAA,oBAAoB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YAC5C,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;AACnE,SAAA;AAAM,aAAA;;YAEH,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,8DAA+D,GAAA,aAAa,GAAwB,wBAAA,CAAC,CAAC;AACxH,YAAA,IAAM,gBAAgB,GAAG,CAAC,gBAAgB,CAAC,CAAC;YAC5C,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;AAC/D,SAAA;KACJ,CAAA;AAED;;;;;;AAMG;AACH,IAAA,iBAAA,CAAA,SAAA,CAAA,gBAAgB,GAAhB,UAAiB,WAA8B,EAAE,aAAsB,EAAA;QAAvE,IA0EC,KAAA,GAAA,IAAA,CAAA;;;QAxEG,IAAM,kBAAkB,GAAG,aAAa,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;QAC9D,IAAI,CAAC,aAAa,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oDAAqD,GAAA,WAAW,GAAc,cAAA,EAAE,kBAAkB,CAAC,CAAC;AACxH,SAAA;;QAGD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4DAA0D,WAAa,EAAE,kBAAkB,CAAC,CAAC;AAC/G,QAAA,IAAI,gBAAyC,CAAC;QAC9C,IAAM,uBAAuB,GAAG,IAAI,CAAC,4BAA4B,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;QACnG,IAAI,uBAAuB,CAAC,gBAAgB,EAAE;YAC1C,uBAAuB,CAAC,gBAAgB,EAAE,CAAC;YAC3C,gBAAgB,GAAG,uBAAuB,CAAC;AAC9C,SAAA;AAAM,aAAA;YACH,IAAM,sBAAsB,GAAG,IAAI,CAAC,2BAA2B,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;YACjG,sBAAsB,CAAC,gBAAgB,EAAE,CAAC;YAC1C,gBAAgB,GAAG,sBAAsB,CAAC;AAC7C,SAAA;AAED,QAAA,IAAM,eAAe,GAAqB;AACtC,YAAA,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE;YAC1B,MAAM,EAAE,sBAAsB,CAAC,UAAU;YACzC,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,QAAQ,EAAE,IAAI,CAAC,QAAQ;AACvB,YAAA,IAAI,EAAE,WAAW;AACjB,YAAA,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE;AACvB,YAAA,aAAa,EAAE,kBAAkB;SACpC,CAAC;;AAGF,QAAA,IAAI,CAAC,yBAAyB,CAAC,eAAe,CAAC,CAAC;AAEhD,QAAA,IAAM,YAAY,GAAiB;AAC/B,YAAA,OAAO,EAAE,CAAA,EAAA,GAAA,IAAI,CAAC,oBAAoB,0CAAE,OAAO;AAC3C,YAAA,UAAU,EAAE,CAAA,EAAA,GAAA,IAAI,CAAC,oBAAoB,0CAAE,UAAU;SACpD,CAAC;AACF,QAAA,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,kBAAkB,CAAC,CAAC;AACvD,QAAA,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC;;QAGzD,OAAO;YACH,cAAc,EAAE,UAAC,KAAiC,EAAA;gBAC9C,IAAM,cAAc,GAAG,KAAI,CAAC,cAAc,uBAEnC,eAAe,CAAA,EAEf,KAAK,CAAA,CACV,CAAC;AAEH,gBAAA,IAAI,cAAc,EAAE;;AAEhB,oBAAA,KAAI,CAAC,yBAAyB,CAAC,cAAc,CAAC,CAAC;AAClD,iBAAA;AACD,gBAAA,OAAO,cAAc,CAAC;aACzB;AACD,YAAA,gBAAgB,EAAE,YAAA;AACd,gBAAA,OAAO,KAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,EAAE,eAAe,CAAC,aAAa,CAAC,CAAC;aACtF;AACD,YAAA,kBAAkB,EAAE,YAAA;gBAChB,OAAO,KAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;aAClE;YACD,eAAe,EAAE,UAAC,MAAoB,EAAA;gBAClC,OAAO,KAAI,CAAC,eAAe,CAAC,MAAM,EAAE,eAAe,CAAC,aAAa,CAAC,CAAC;aACtE;YACD,SAAS,EAAE,UAAC,QAAkB,EAAA;gBAC1B,OAAO,KAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,eAAe,CAAC,aAAa,CAAC,CAAC;aAClE;AACD,YAAA,WAAW,EAAE,gBAAgB;AAC7B,YAAA,KAAK,EAAE,eAAe;SACzB,CAAC;KAEL,CAAA;AAED;;;;;;AAMG;IACH,iBAAc,CAAA,SAAA,CAAA,cAAA,GAAd,UAAe,KAAuB,EAAA;AAClC,QAAA,IAAM,sBAAsB,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AACxE,QAAA,IAAI,sBAAsB,EAAE;;YAExB,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC5C,sBAAsB,CAAC,cAAc,EAAE,CAAC;AACxC,YAAA,IAAM,UAAU,GAAG,sBAAsB,CAAC,gBAAgB,EAAE,CAAC;;YAE7D,IAAI,UAAU,KAAK,IAAI,EAAE;AACrB,gBAAA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,0DAAwD,KAAK,CAAC,IAAI,GAAA,IAAA,GAAK,UAAU,GAAK,KAAA,EAAE,KAAK,CAAC,aAAa,CAAC,CAAC;AAC/H,gBAAA,IAAM,cAAc,GAAA,QAAA,CAAA,QAAA,CAAA;;AAEhB,oBAAA,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAA,EAC/B,KAAK,CAAA,EAAA,EACR,MAAM,EAAE,sBAAsB,CAAC,SAAS,GAC3C,CAAC;AAEF,gBAAA,OAAO,cAAc,CAAC;AACzB,aAAA;AAAM,iBAAA;gBACH,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,sDAAsD,EAAE,KAAK,CAAC,aAAa,CAAC,CAAC;AAClG,aAAA;AACJ,SAAA;AAAM,aAAA;AACH,YAAA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+CAAgD,GAAA,KAAK,CAAC,OAAS,EAAE,KAAK,CAAC,aAAa,CAAC,CAAC;AAC3G,SAAA;AAED,QAAA,OAAO,IAAI,CAAC;KACf,CAAA;AAED;;;;AAIG;AACH,IAAA,iBAAA,CAAA,SAAA,CAAA,eAAe,GAAf,UAAgB,MAAoB,EAAE,aAAqB,EAAA;QACvD,IAAM,oBAAoB,GAAG,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AACjF,QAAA,IAAI,oBAAoB,EAAE;AACtB,YAAA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC;YAC/D,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,aAAa,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAM,oBAAoB,CAAA,EAAK,MAAM,CAAA,CAAE,CAAC;AAC7F,SAAA;AAAM,aAAA;AACH,YAAA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;YAC7D,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;AAC/D,SAAA;KACJ,CAAA;AAED;;;;AAIG;AACH,IAAA,iBAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,QAAkB,EAAE,aAAqB,EAAA;QAC/C,IAAM,QAAQ,GAAyB,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACvF,IAAI,CAAC,QAAQ,EAAE;AACX,YAAA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;YACzD,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,aAAa,EAAA,QAAA,CAAA,EAAA,EAAO,QAAQ,CAAA,CAAG,CAAC;YACjE,OAAO;AACV,SAAA;AAED,QAAA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;AAC1D,QAAA,KAAK,IAAM,OAAO,IAAI,QAAQ,EAAE;AAC5B,YAAA,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;AACnC,gBAAA,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACzB,aAAA;YACD,QAAQ,CAAC,OAAO,CAAC,IAAI,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC1C,SAAA;KACJ,CAAA;AAED;;;;;;;;AAQG;IACK,iBAAyB,CAAA,SAAA,CAAA,yBAAA,GAAjC,UAAkC,KAAuB,EAAA;AACrD,QAAA,IAAM,cAAc,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;AAC3E,QAAA,IAAI,cAAc,EAAE;AAChB,YAAA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iDAAkD,GAAA,KAAK,CAAC,IAAI,mBAAgB,EAAE,KAAK,CAAC,aAAa,CAAC,CAAC;YACrH,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AAC5C,SAAA;AAAM,aAAA;AACH,YAAA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iDAAkD,GAAA,KAAK,CAAC,IAAI,aAAU,EAAE,KAAK,CAAC,aAAa,CAAC,CAAC;YAC/G,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;AAC5F,SAAA;KACJ,CAAA;AAED;;;;;;AAMG;AACK,IAAA,iBAAA,CAAA,SAAA,CAAA,gBAAgB,GAAxB,UAAyB,KAAuB,EAAE,WAAoC,EAAA;QAClF,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;KACzD,CAAA;AAED;;;;;AAKG;AACH,IAAA,iBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UAAkB,WAA8B,EAAE,aAAqB,EAAA;QAAvE,IAuGC,KAAA,GAAA,IAAA,CAAA;QAtGG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6DAA2D,WAAa,EAAE,aAAa,CAAC,CAAC;AAE3G;;;AAGG;QAEH,IAAM,gCAAgC,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACnF,IAAI,CAAC,gCAAgC,EAAE;YACnC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wEAAyE,GAAA,aAAe,CAAC,CAAC;AAC/G,SAAA;QAED,IAAI,cAAc,GAAG,CAAC,CAAC;QACvB,IAAI,eAAe,GAAG,CAAC,CAAC;QACxB,gCAAgC,KAAA,IAAA,IAAhC,gCAAgC,KAAhC,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,gCAAgC,CAAE,OAAO,CAAC,UAAC,WAAW,EAAA;AAClD,YAAA,cAAc,IAAI,WAAW,CAAC,SAAS,CAAC;AACxC,YAAA,eAAe,EAAE,CAAC;AACtB,SAAC,CAAE,CAAA;QAEH,IAAM,sBAAsB,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC7E,IAAM,YAAY,GAAG,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACzE,IAAM,QAAQ,GAAG,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAEjE,QAAA,IAAI,sBAAsB,EAAE;AACxB,YAAA,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;AAEjC;;;;AAIG;YACH,IAAM,iBAAe,GAAuB,EAAE,CAAC;YAC/C,IAAI,qBAAmB,GAAW,CAAC,CAAC;AAEpC,YAAA,sBAAsB,CAAC,OAAO,CAAC,UAAA,KAAK,EAAA;AAChC,gBAAA,IAAI,KAAK,CAAC,IAAI,KAAK,WAAW,IAAI,KAAK,CAAC,MAAM,KAAK,sBAAsB,CAAC,SAAS,EAAE;AACjF,oBAAA,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+CAAgD,GAAA,KAAK,CAAC,IAAI,GAAc,aAAA,GAAA,WAAa,EAAE,aAAa,CAAC,CAAC;AACxH,oBAAA,qBAAmB,EAAE,CAAC;oBAEtB,IAAM,cAAc,GAAG,KAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;AAClD,oBAAA,IAAI,cAAc,EAAE;AAChB,wBAAA,iBAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AACxC,qBAAA;AACJ,iBAAA;AAED,gBAAA,iBAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAChC,aAAC,CAAC,CAAC;;YAGH,IAAM,qBAAqB,GAAG,iBAAe,CAAC,IAAI,CAAC,UAAC,MAAM,EAAE,MAAM,EAAA,EAAK,OAAA,MAAM,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAA,EAAA,CAAC,CAAC;;YAGhH,IAAM,cAAc,GAAG,qBAAqB,CAAC,MAAM,CAAC,UAAA,KAAK,EAAA,EAAI,OAAA,KAAK,CAAC,IAAI,KAAK,WAAW,IAAI,KAAK,CAAC,MAAM,KAAK,sBAAsB,CAAC,SAAS,CAAA,EAAA,CAAC,CAAC;AAC9I,YAAA,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;AAC3B;;;AAGG;AACH,gBAAA,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC3B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,0FAA0F,EAAE,aAAa,CAAC,CAAC;AAClI,iBAAA;AACD,gBAAA,IAAM,aAAa,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;gBACxC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,8CAA4C,WAAa,EAAE,aAAa,CAAC,CAAC;;gBAG9F,IAAM,WAAW,GAAG,qBAAqB,CAAC,MAAM,CAAC,UAAC,QAAQ,EAAE,OAAO,EAAA;AAC/D,oBAAA,IAAI,OAAO,CAAC,IAAI,KAAK,WAAW,EAAE;AAC9B,wBAAA,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uDAAA,GAAwD,OAAO,CAAC,IAAM,EAAE,aAAa,CAAC,CAAC;;AAEzG,wBAAA,IAAM,kBAAkB,GAAM,OAAO,CAAC,IAAI,eAAY,CAAC;AACvD;;;;AAIG;AACH,wBAAA,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;AAC/B,4BAAA,QAAQ,CAAC,kBAAkB,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC;AACrD,yBAAA;AAAM,6BAAA;AACH,4BAAA,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,wCAAyC,GAAA,WAAW,GAAuB,sBAAA,GAAA,OAAO,CAAC,IAAI,GAAA,YAAY,EAAE,aAAa,CAAC,CAAC;AAC3I,yBAAA;AACJ,qBAAA;AAED,oBAAA,OAAO,QAAQ,CAAC;iBACnB,EAAE,aAAa,CAAC,CAAC;AAElB,gBAAA,IAAM,UAAU,GACT,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAA,WAAW,GACX,YAAY,CAAA,EACZ,QAAQ,CACX,EAAA,EAAA,YAAY,EAAE,cAAc,EAC5B,WAAW,EAAE,eAAe,EAC5B,mBAAmB,EAAA,qBAAA,GACtB,CAAC;gBACF,IAAI,CAAC,sBAAsB,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;gBAE7D,IAAI,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC;AAC5D,aAAA;AAAM,iBAAA;gBACH,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,sEAAoE,WAAa,EAAE,aAAa,CAAC,CAAC;AACzH,aAAA;AACJ,SAAA;AAAM,aAAA;YACH,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,0CAA0C,EAAE,aAAa,CAAC,CAAC;AAClF,SAAA;KACJ,CAAA;AAED;;;;AAIG;IACH,iBAAmB,CAAA,SAAA,CAAA,mBAAA,GAAnB,UAAoB,aAAqB,EAAA;QACrC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uDAAuD,EAAE,aAAa,CAAC,CAAC;AAC1F,QAAA,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;KACpD,CAAA;AAED;;;;AAIG;IACK,iBAAY,CAAA,SAAA,CAAA,YAAA,GAApB,UAAqB,aAAqB,EAAA;AACtC,QAAA,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;QAExC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4CAA4C,EAAE,aAAa,CAAC,CAAC;AAC/E,QAAA,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAEvD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uCAAuC,EAAE,aAAa,CAAC,CAAC;AAC1E,QAAA,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAEnD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gDAAgD,EAAE,aAAa,CAAC,CAAC;AACnF,QAAA,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAE7C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,8CAA8C,EAAE,aAAa,CAAC,CAAC;AACjF,QAAA,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;KAC1D,CAAA;AAED;;;;;AAKG;IACH,iBAAsB,CAAA,SAAA,CAAA,sBAAA,GAAtB,UAAuB,QAAqC,EAAA;AACxD,QAAA,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QACrC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QACzC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,8DAA+D,GAAA,UAAY,CAAC,CAAC;AAEjG,QAAA,OAAO,UAAU,CAAC;KACrB,CAAA;AAED;;;;;AAKG;IACH,iBAAyB,CAAA,SAAA,CAAA,yBAAA,GAAzB,UAA0B,UAAkB,EAAA;QACxC,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAEjD,QAAA,IAAI,MAAM,EAAE;YACR,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,0CAA2C,GAAA,UAAU,GAAW,WAAA,CAAC,CAAC;AACzF,SAAA;AAAM,aAAA;YACH,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,0CAA2C,GAAA,UAAU,GAAe,eAAA,CAAC,CAAC;AAC7F,SAAA;AAED,QAAA,OAAO,MAAM,CAAC;KACjB,CAAA;AAED;;;;;AAKG;AACH,IAAA,iBAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UAAW,MAA0B,EAAE,aAAqB,EAAA;QAA5D,IAOC,KAAA,GAAA,IAAA,CAAA;QANG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,gDAAgD,EAAE,aAAa,CAAC,CAAC;QAErF,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,QAAqC,EAAE,UAAkB,EAAA;YAC7E,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mDAAiD,UAAY,EAAE,aAAa,CAAC,CAAC;YAChG,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;AACnC,SAAC,CAAC,CAAC;KACN,CAAA;AAED;;;;AAIG;AACK,IAAA,iBAAA,CAAA,SAAA,CAAA,sBAAsB,GAA9B,UAA+B,KAAuB,EAAE,SAA8B,EAAA;AAClF,QAAA,SAAS,CAAC,OAAO,CAAC,UAAC,GAAG,EAAA;YAClB,IAAI,GAAG,IAAI,KAAK,IAAI,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE;AAChD,gBAAA,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AACvC,aAAA;AACL,SAAC,CAAC,CAAC;KACN,CAAA;IACL,OAAC,iBAAA,CAAA;AAAD,CAAC,EAAA;;;;"}